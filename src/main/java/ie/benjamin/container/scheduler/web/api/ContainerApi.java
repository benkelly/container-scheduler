/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ie.benjamin.container.scheduler.web.api;

import ie.benjamin.container.scheduler.web.api.model.Container;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-09T15:41:36.809+01:00[Europe/Dublin]")

@Validated
@Api(value = "container", description = "the container API")
public interface ContainerApi {

    default ContainerApiDelegate getDelegate() {
        return new ContainerApiDelegate() {};
    }

    @ApiOperation(value = "deletes a container", nickname = "apiDeleteContainer", notes = "deletes a container ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "container is deleted"),
        @ApiResponse(code = 404, message = "no node could be found to schedule to container too") })
    @RequestMapping(value = "/container/{containerId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> apiDeleteContainer(@ApiParam(value = "UUID of the container to delete",required=true) @PathVariable("containerId") UUID containerId) {
        return getDelegate().apiDeleteContainer(containerId);
    }


    @ApiOperation(value = "schedules a container", nickname = "apiSchedule", notes = "select an appropriate node to host the container ", response = Container.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "container is scheduled to a node", response = Container.class),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "no node could be found to schedule to container too") })
    @RequestMapping(value = "/container/schedule",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Container> apiSchedule(@ApiParam(value = "Container to schedule"  )  @Valid @RequestBody Container container) {
        return getDelegate().apiSchedule(container);
    }

}
