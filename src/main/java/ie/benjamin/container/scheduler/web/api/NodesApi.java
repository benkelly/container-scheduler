/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ie.benjamin.container.scheduler.web.api;

import ie.benjamin.container.scheduler.service.NodeService;
import ie.benjamin.container.scheduler.service.dto.NodeDTO;
import ie.benjamin.container.scheduler.web.api.model.Node;

import java.util.UUID;

import ie.benjamin.container.scheduler.web.rest.NodeResource;
import io.github.jhipster.web.util.PaginationUtil;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.util.UriComponentsBuilder;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-09T15:41:36.809+01:00[Europe/Dublin]")

@Validated
@Api(value = "nodes", description = "the nodes API")
public interface NodesApi {

    final Logger log = LoggerFactory.getLogger(NodeResource.class);

    static final String ENTITY_NAME = "node";


    final NodeService nodeService = null;

    default NodesApiDelegate getDelegate() {
        return new NodesApiDelegate() {
        };
    }

    @ApiOperation(value = "get single node", nickname = "apiGetNode", notes = "Get single node ", response = Node.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "A Node", response = Node.class),
        @ApiResponse(code = 404, message = "no node could be found with the specified ID")})
    @RequestMapping(value = "/nodes/{nodeId}",
        produces = {"application/json"},
        method = RequestMethod.GET)
    default ResponseEntity<Node> apiGetNode(@ApiParam(value = "UUID of the node to get", required = true) @PathVariable("nodeId") UUID nodeId) {
        return getDelegate().apiGetNode(nodeId);
    }


    @ApiOperation(value = "get all nodes", nickname = "apiGetNodes", notes = "Get all nodes ", response = Node.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "All nodes", response = Node.class, responseContainer = "List")})
    @RequestMapping(value = "/nodes",
        produces = {"application/json"},
        method = RequestMethod.GET)
//    default ResponseEntity<List<Node>> apiGetNodes() {
//        return getDelegate().apiGetNodes();
//    }
    default ResponseEntity<List<NodeDTO>> getAllNodes() {
        log.debug("REST request to get a page of Nodes");
        Page<NodeDTO> page = nodeService.findAll(new PageRequest(
            0,
            Integer.MAX_VALUE,
            Sort.Direction.ASC,"id"));
        return (ResponseEntity<List<NodeDTO>>) page.getContent();
    }

}
